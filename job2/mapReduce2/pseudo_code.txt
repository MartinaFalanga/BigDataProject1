mapper.py:

For each line in the input:
1. Remove leading and trailing whitespaces from the line.
2. Split the line into columns using a comma as a delimiter.
3. Try: 
    3a. Attempt to extract the user ID, helpfulness numerator, and helpfulness denominator from the columns.
    3b. Calculate the helpfulness score as the ratio of the helpfulness numerator to the helpfulness denominator.
4. If a ZeroDivisionError or ValueError occurs:
    4a. skip to the next line.
5. Emit the user ID and helpfulness score as a key-value pair to the standard output.


reducer.py:
1. Initialize an empty dictionary named "users_helpfulness"
2. Initialize an empty dictionary named "users_avg_helpfulness"
3. For each line in the input:
    3a. Remove leading and trailing whitespaces from the line
    3b. Split the line by tab ('\t') into userId and helpfulness
    3c. Try to convert helpfulness to a float:
            3a.1 If userId is not present in users_helpfulness:
                3a.1.2 Add userId as a key to users_helpfulness
                       with initial values of sum and count
            3a.1 Increment the "sum" value of
                users_helpfulness[userId]  by helpfulness
            3a.1 Increment the "count" value of
                 users_helpfulness[userId] by 1
    3d. If conversion fails, continue to the next line

4. For each userId in users_helpfulness:
    4a. Try to calculate the average helpfulness:
        4a.1 If userId is not present in users_avg_helpfulness:
            4a.1.1 Calculate the average as
                   users_helpfulness[userId]['sum'] divided by
                   users_helpfulness[userId]['count']
            4a.1.2 Add userId as a key to users_avg_helpfulness
                   with the calculated average value
    4b. If an error occurs, continue to the next userId

5. Sort the dictionary users_avg_helpfulness based on the "avg"
   values in descending order and store the
   result in "sorted_dictionary"

6. For each key-value pair in sorted_dictionary:
    6.a Print the userId (key) and the average
         helpfulness (value['avg']) separated by a tab