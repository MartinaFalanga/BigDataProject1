
mapper.py:

Read input from standard input.
For each line of input:
1. Remove any leading or trailing white spaces.
2. Split the line by comma to extract columns.
3. Try :
    3a. to extract the user ID, product ID, and score from the columns.
    3b.If the score is greater than or equal to 4 then emit the user ID and product ID as a key-value pair to standard output.


reducer.py:

Initialize an empty dictionary called "user_products" to keep track of products reviewed with a score of 4 or higher for each user.
For each line of input:
1. Remove any leading or trailing white spaces.
2. Split the line by tab to extract user ID and product ID.
3. If the user ID is not in the "user_products" dictionary, add an empty set for that user.
4. Add the product ID to the set of products reviewed by the user.
5. Initialize an empty dictionary called "affine_groups" to keep track of groups of users who have reviewed at least 3 common products.
6. For each user in "user_products":
    6a. For each other user in "user_products":
    6b. If the user is not the other user:
        - Find the set of products reviewed in common by both users.
        - If the number of common products is greater than or equal to 3:
        - Create a sorted tuple of the two user IDs as a key for the group.
        - Add the set of common products to the group.
        -  Sort the "affine_groups" dictionary by the first user ID in the tuple key.
7. For each group in "affine_groups":
7a. Convert the tuple key into a string of user IDs separated by commas.
7b. Convert the set of common products into a string of product IDs separated by commas.
7c. Emit the user IDs and common products as a key-value pair to standard output.